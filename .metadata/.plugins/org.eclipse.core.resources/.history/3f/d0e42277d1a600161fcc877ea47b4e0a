package index;





import java.io.*;
import java.math.BigDecimal;
import java.math.RoundingMode;


import java.util.*;

import tools.FrenchTokenizer;
import tools.Normalizer;
public class kkk {


	public File corpus;
	public Normalizer normalizer;
	public File index_; 
	public String query ;

	public kkk (Normalizer normalizer, File corpus , File index_ , String query)
	{
		this.normalizer = normalizer;

		this.corpus = corpus;
		this.index_ = index_;
		this.query = query ;
	}
	
	public HashMap<String,Integer> getTerm () throws IOException
	{	
		if (!index_.exists()) {
			index_.createNewFile();
		}
		else {
			   index_.delete();
			   index_.createNewFile();
		}

		FileWriter fw = new FileWriter(index_.getAbsoluteFile());
		BufferedWriter bw = new BufferedWriter(fw);
		
		//  get the occurence of each term in each document
//	HashMap<String, HashMap<String, Integer>> tf = new HashMap<String, HashMap<String, Integer>>();
		int NumberOfDocument = 0 ;
		ArrayList<String>words = normalizer.normalize(query);
				HashSet<String> wordInFiles = new HashSet<String>(words) ;
	//	System.out.print(wordsInFiles);
 HashMap <String , Integer> tf =  new HashMap <String ,Integer> () ; 
		// ArrayList <Integer> tfs = new ArrayList <Integer>();
		if (corpus.isDirectory()) {
	 for (String term : wordInFiles) {
		 term =  term.toLowerCase();
		Integer value =  Collections.frequency(words, term);
			
		 tf.put (term , value) ;
		 
	//	 System.out.print(term + "," + tf.get(term) + "\n");
		}
	
	 }
	return tf;
	}
	}



