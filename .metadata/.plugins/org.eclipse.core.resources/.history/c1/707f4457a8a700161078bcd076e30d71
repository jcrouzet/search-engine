package Search;



import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;





import tools.Normalizer;

public class Search {



	public File corpus;
	public Normalizer normalizer;
	public  File index_; 
	public String query ;
	public File weights_query;


	public Search (Normalizer normalizer, File corpus , File index_ , String query , File weights_query)
	{
		this.normalizer = normalizer; 
		this.corpus = corpus;
		this.index_ = index_;
		this.query = query ;
		this.weights_query = weights_query;
	}




	public void  saveWeights () throws IOException
	{	
		
		// Create the index
					// if file doesnt exists, then create it
				if (!weights_query.exists()) {
					weights_query.createNewFile();
				}
				else {
					weights_query.delete();
					weights_query.createNewFile();
				
				}
				FileWriter fw = new FileWriter(weights_query.getAbsoluteFile());
				BufferedWriter bw = new BufferedWriter(fw);
				

		HashMap <String , Integer> tf =  new HashMap <String ,Integer> () ; 

		ArrayList<String> words = normalizer.normalize(query);
		HashSet<String> wordsInFiles = new HashSet<String>(words) ;


		if (corpus.isDirectory()) 
		{

			for (String term : wordsInFiles)
			{
				term =  term.toLowerCase();
				Integer value =  Collections.frequency(words, term);

				tf.put (term , value) ;

			}

			HashMap <String , Double> idf =  new HashMap <String ,Double> () ; 
			BufferedReader br = null ;
			br = new BufferedReader(new FileReader(index_));
			String line;
			while ((line = br.readLine()) != null)
			{
				String[] line_parts = line.split("  ");
				String term= line_parts[0];

				if(!wordsInFiles.contains(term))
				continue;
				String[] docs = line_parts[1].split(",");
				idf.put(term, 1+Math.log(corpus.listFiles().length/docs.length) ); 
				
			
			//	System.out.print(term );
			}
			 br.close();


			HashMap <String , Double> tfidf =  new HashMap <String ,Double> () ; 
			for (String term : wordsInFiles)
			{
				tfidf.put(term ,    idf.get(term) );
	

	System.out.print(term + "\t " + tfidf.get(term) +"\n");
				
		bw.write(term + "\t"+  idf.get(term) +"\n");
			}
			
		bw.close();
		}

	}






}
