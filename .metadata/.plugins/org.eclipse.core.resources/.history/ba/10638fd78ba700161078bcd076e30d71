package Search;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;



import tools.Normalizer;

public class WeightsQuery {



	public File corpus;
	public Normalizer normalizer;
	public  File index_; 
	public String query ; 
	 

	public WeightsQuery (Normalizer normalizer, File corpus , File index_ , String query)
	{
		this.normalizer = normalizer; 
		this.corpus = corpus;
		this.index_ = index_;
		this.query = query ;
	}



	
	public HashMap<String,Integer> getTerm () throws IOException
	{	





		HashMap <String , Integer> tf =  new HashMap <String ,Integer> () ; 
		
		ArrayList<String> words = normalizer.normalize(query);
		HashSet<String> wordsInFiles = new HashSet<String>(words) ;
		

		if (corpus.isDirectory()) {

			for (String term : wordsInFiles) {
				term =  term.toLowerCase();
				Integer value =  Collections.frequency(words, term);

				tf.put (term , value) ;

			}

		}
		return tf;
	}
	public HashMap<String,Integer> idf () throws IOException
	{	
	HashMap <String , Integer> idf =  new HashMap <String ,Integer> () ; 
	BufferedReader br = null ;
	br = new BufferedReader(new FileReader(index_));
	String line;
	while ((line = br.readLine()) != null)
	{
		String[] line_parts = line.split("  ");
		String word = line_parts[0];
		
		if(!request.contains(word))
			continue;
		
		//Identifiants des fichiers
		String[] files_names = line_parts[1].split(",");
		//tfidfs des fichiers
		double[] tfidfs_word = Arrays.asList(line_parts[2].split(",")).stream().mapToDouble(Double::parseDouble).toArray();

		HashMap<String, Double> val_word = best_files.get(word);
		for(int i = 0; i < files_names.length; i++)
		{
			if(val_word == null)
				val_word = new HashMap<String, Double>();
			
			val_word.put(files_names[i], tfidfs_word[i]);
			best_files.put(word, val_word);
			
			HashMap<String, Double> val_files = weight_by_file.get(files_names[i]);
			if(val_files == null)
				val_files = new HashMap<String, Double>();
			val_files.put(word, tfidfs_word[i]);
			weight_by_file.put(files_names[i], val_files);
			
		}
	}
	
	
	return idf;
	}
}
